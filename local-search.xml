<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog/2022/05/03/hello-world/"/>
    <url>/blog/2022/05/03/hello-world/</url>
    
    <content type="html"><![CDATA[<h4 id="各种语言的hello-world"><a href="#各种语言的hello-world" class="headerlink" title="各种语言的hello world"></a>各种语言的hello world</h4><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//C</span><br>#include&lt;stdio.h&gt;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    printf(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//C++</span><br>#include&lt;iostream&gt;<br>using namespace std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello World!&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//Java</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> class <span class="hljs-title">Hello</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(Sting[] args)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//C#</span><br>using System;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span>&#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>        Console.ReadKey();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//python</span><br>print(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br><br><span class="hljs-comment">//PHp</span><br>echo <span class="hljs-string">&quot;Hello World!&quot;</span>;<br></code></pre></td></tr></table></figure><p><strong>暂时只会这几个Hello World，以后学了其他的再加……</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo + gitee page搭建个人博客</title>
    <link href="/blog/2021/06/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/blog/2021/06/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>利用gitee page托管网页，省去了服务器，可以随时更新代码，非常便捷</p><p>本文参考<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p></blockquote><h4 id="1、软件依赖"><a href="#1、软件依赖" class="headerlink" title="1、软件依赖"></a>1、软件依赖</h4><blockquote><p>1、node.js</p><p>2、npm</p><p>3、git</p><p><em>以上软件请自行百度搜索安装</em></p></blockquote><h4 id="2、创建仓库"><a href="#2、创建仓库" class="headerlink" title="2、创建仓库"></a>2、创建仓库</h4><p>在gitee中新建一个你的码云仓库，仓库名为</p><p><strong><a href="https://gitee.com/%E4%BD%A0%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://gitee.com/你的用户名/仓库名</a></strong></p><p><strong>开启gitee page</strong>：</p><p><img src="1.png"></p><h4 id="3、配置ssh-key"><a href="#3、配置ssh-key" class="headerlink" title="3、配置ssh key"></a>3、配置ssh key</h4><p>1、桌面右键使用git bash打开，设置user.name和user.email配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;你的GitHub用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;你的Gitte注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>2、生成ssh密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的Gitte注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>完成后按三次回车即可</p><p>3、复制密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>复制上面的密钥信息即可</p><p>4、添加密钥到gitee</p><p><img src="2.png"></p><h4 id="4、安装hexo"><a href="#4、安装hexo" class="headerlink" title="4、安装hexo"></a>4、安装hexo</h4><ol><li>打开git bash输入代码<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br></code></pre></td></tr></table></figure>等待完成后输入，查看是否安装完成<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure></li><li>进入需要安装到的目录，初始化hexo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;dir&quot;</span><br>npm install hexo --save<br>hexo init <span class="hljs-comment">#初始化</span><br><br><span class="hljs-comment">#常用指令</span><br>hexo clean <span class="hljs-comment">#清除静态文件</span><br>hexo g <span class="hljs-comment">#部署加载静态文件</span><br>hexo s <span class="hljs-comment">#打开本地服务器预览</span><br>hexo d <span class="hljs-comment">#部署推送</span><br></code></pre></td></tr></table></figure><h4 id="5、配置-config-yml文件"><a href="#5、配置-config-yml文件" class="headerlink" title="5、配置_config.yml文件"></a>5、配置_config.yml文件</h4><blockquote><p>打开目录下的_config.yml文件，末尾补充</p><p>deploy:<br>  type: git<br>  repo: <a href="https://gitee.com/%E4%BD%A0%E7%9A%84%E7%A9%BA%E9%97%B4%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://gitee.com/你的空间名/仓库名</a></p><p>  branch: master</p></blockquote><h4 id="6、提交、部署"><a href="#6、提交、部署" class="headerlink" title="6、提交、部署"></a>6、提交、部署</h4><blockquote><p>安装部署工具：npm install hexo-deployer-git -save</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d <span class="hljs-comment">#直接部署到gitee即可</span><br></code></pre></td></tr></table></figure><p>回到gitee更新页面即可看到内容</p>]]></content>
    
    
    
    <tags>
      
      <tag>Create person Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python并发编程</title>
    <link href="/blog/2021/02/28/Python%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E8%BF%9B%E7%A8%8B%E3%80%81%E5%A4%9A%E5%8D%8F%E7%A8%8B%EF%BC%89/"/>
    <url>/blog/2021/02/28/Python%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E8%BF%9B%E7%A8%8B%E3%80%81%E5%A4%9A%E5%8D%8F%E7%A8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="Python并发编程（多线程、多进程、多协程）"><a href="#Python并发编程（多线程、多进程、多协程）" class="headerlink" title="Python并发编程（多线程、多进程、多协程）"></a>Python并发编程（多线程、多进程、多协程）</h3><blockquote><p>本篇文章参考视频：<a href="https://www.bilibili.com/video/BV1bK411A7tV">https://www.bilibili.com/video/BV1bK411A7tV</a></p><p>并发编程的作用：在系统运行程序时，往往是按顺序执行的，在运行完成后等待使用文件/设备，cpu在等待使用完成后才能处理执行，在等待途中花费了大量时间，使用并发可以有效改善此问题。</p></blockquote><a id="more"></a> <h4 id="1、程序提速方法"><a href="#1、程序提速方法" class="headerlink" title="1、程序提速方法"></a>1、程序提速方法</h4><p>单线程串行：按照顺序执行，不加以改造</p><p>多线程并发：cpu和io并发执行、python中使用threading模块来实现</p><p>多cpu并行：多个核心cpu进行处理、python中使用multiprocessing模块实现</p><p>多机器并行：用于大数据处理、可使用hadoop/hive/spark等来实现</p><h4 id="2、python对并发编程的支持"><a href="#2、python对并发编程的支持" class="headerlink" title="2、python对并发编程的支持"></a>2、python对并发编程的支持</h4><p>threading（多线程）、multiprocessing（多进程）、asyncio（异步io，单线程中利用cpu和io并发执行原理、实现函数异步执行）</p><p><strong><em>#在对一些资源访问冲突时可以使用Lock对资源加锁，防止冲突访问</em></strong></p><h4 id="3、threading多线程、multiprocessing多进程、coroutine多协程的区别"><a href="#3、threading多线程、multiprocessing多进程、coroutine多协程的区别" class="headerlink" title="3、threading多线程、multiprocessing多进程、coroutine多协程的区别"></a>3、threading多线程、multiprocessing多进程、coroutine多协程的区别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">什么是cup密集型计算、io密集型计算？<br><br>cpu密集型（cpu-bound）:<br>cpu密集型也叫计算密集型，是指i/o在很短的时间就可以完成大量的计算和处理，特点是cpu占用率特别高<br><span class="hljs-comment">#例如：解压缩压缩、加密解密、正则表达式搜索</span><br><br>io密集型（i/o-bound）:<br>io密集型指的是系统运作大部分的状况是在等i/o（硬盘/内存）的读写操作，cpu占用率低<br><span class="hljs-comment">#例如：文件处理程序、网络爬虫程序、读写数据库程序</span><br></code></pre></td></tr></table></figure><ul><li><p>多进程：</p><ul><li>优点：可以利用多核cpu并行运算</li><li>缺点：占用资源最多、可启动数目比线程少</li><li>适用于：cpu密集型计算</li></ul></li><li><p>多线程：</p><ul><li>优点：相比于进程、更轻量级、占用资源少</li><li>缺点：<ul><li>相比进程：多线程只能并发执行，不能利用多cpu（GLI）</li><li>相比协程：启动数目有限，占用内存资源，有进程切换开销</li></ul></li><li>适用于：io密集型计算、同时运行的任务数目要求不多</li></ul></li><li><p>多协程：</p><ul><li>优点：内存开销最少、启动协程数量最多</li><li>缺点：支持的库有限制（aiohttp vs requests）、代码实现复杂</li><li>适用于：io密集型计算、需要超多任务运行、但有现成库支持的场景</li></ul></li></ul><h4 id="4、使用多线程"><a href="#4、使用多线程" class="headerlink" title="4、使用多线程"></a>4、使用多线程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">python创建多线程的方法：<br><span class="hljs-number">1</span>、准备一个函数<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">a, b</span>):</span><br>    do_craw(a, b)<br>    <br><span class="hljs-number">2</span>、创建一个线程<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-comment">#target传入函数，args传入参数（为一个元组）</span><br>t = threading.Thread(target = fun, args = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><br><span class="hljs-number">3</span>、启动线程<br>t.start()<br><br><span class="hljs-number">4</span>、等待结束<br>t.join()<br></code></pre></td></tr></table></figure><blockquote><p>爬取例子：博客园（<a href="https://www.cnblogs.com/#p1%EF%BC%89">https://www.cnblogs.com/#p1）</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#packge crawler.py</span><br><span class="hljs-keyword">import</span> requests, threading<br><br><span class="hljs-comment">#生成url列表</span><br>urls = [<span class="hljs-string">f&quot;https://www.cnblogs.com/#p<span class="hljs-subst">&#123;page&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">craw</span>(<span class="hljs-params">url</span>):</span><br>    r = requests.get(url)<br>    print(url, <span class="hljs-built_in">len</span>(r.text))<br>    <span class="hljs-keyword">return</span> r.text<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> crawler<br><br><span class="hljs-comment">#单线程</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">single_thread</span>():</span><br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> crawler.urls:<br>        crawler.craw(url)<br><span class="hljs-comment">#多线程</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">multi_thread</span>(<span class="hljs-params">url</span>):</span><br>    <span class="hljs-comment">#创建线程列表</span><br>    threads = []<br>    <span class="hljs-comment">#添加线程到列表</span><br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> crawler.urls:<br>        threads.append(<br>        threading.Thread(target = fun, args = (url, ))<br>        )<br>    <span class="hljs-comment">#启动线程</span><br>    <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>        thread.start()<br>    <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>        thread.join()<br></code></pre></td></tr></table></figure><h4 id="5、实现生产者消费者爬虫"><a href="#5、实现生产者消费者爬虫" class="headerlink" title="5、实现生产者消费者爬虫"></a>5、实现生产者消费者爬虫</h4><ul><li>多组件的Pipeline技术架构<ul><li>复杂的事情一般不会下子做完，而是会分很多中间步骤一步步完成</li><li>生产者—-&gt;消费者</li></ul></li><li>生产者消费者爬虫架构<ul><li><strong>待爬取的url列表</strong>—&gt;<strong>线程组1网页下载</strong>—&gt;<strong>下载好的网页队列</strong>—&gt;<strong>线程组2解析储存</strong>—&gt;<strong>解析后的数据</strong></li></ul></li><li>多线程数据通信的queue.Queue<ul><li>queue.Queue可用于多线程之间的、线程安全的数据通信</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#queue.Queue实现</span><br><span class="hljs-keyword">import</span> queue<br><br><span class="hljs-comment">#创建Queue</span><br>q = queue.Queue()<br><span class="hljs-comment">#添加元素</span><br>q.put(item)<br><span class="hljs-comment">#获取元素</span><br>item = q.get()<br><br><span class="hljs-comment">#查询状态</span><br><span class="hljs-comment">#查看元素的多少</span><br>q.qsize()<br><span class="hljs-comment">#判断是否为空</span><br>q.empty()<br><span class="hljs-comment">#判断是否已满</span><br>q.full()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#packge crawler.py</span><br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-comment">#解析链接和标题</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span>(<span class="hljs-params">html</span>):</span><br>    <span class="hljs-comment">#class=&quot;post-item-title&quot;</span><br>    soup = BeautifulSoup(html, <span class="hljs-string">&quot;lxml&quot;</span>)<br>    links = soup.find_all(<span class="hljs-string">&quot;a&quot;</span>, class_ = <span class="hljs-string">&quot;post-item-title&quot;</span>)<br>    <span class="hljs-keyword">return</span> (link[<span class="hljs-string">&quot;href&quot;</span>], link.get_text() <span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> links)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#packge prodecer_consumer_spinder.py</span><br><span class="hljs-keyword">import</span> queue, crawler, time<br><br><span class="hljs-comment">#添加queue爬取数据</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_craw</span>(<span class="hljs-params">url_queue: queue.Queue, html_queue: queue.Queue</span>):</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        url = url_queue.get()<br>        html = crawler.craw(html)<br>        html_queue.put(html)<br>        print(threading.surrent_thread().name, <span class="hljs-string">f&quot;craw<span class="hljs-subst">&#123;url&#125;</span>&quot;</span>,<br>             <span class="hljs-string">&quot;url_queue.size = &quot;</span>, url_queue.qsize())<br>        time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#添加queue解析数据</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_parse</span>(<span class="hljs-params">html_queue: queue.Queue, fout</span>):</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        html = html_queue.get()<br>        infos = crawler.parse(html)<br>        <span class="hljs-keyword">for</span> info <span class="hljs-keyword">in</span> infos:<br>            fout.write(<span class="hljs-built_in">str</span>(info) + <span class="hljs-string">&quot;\n&quot;</span>)<br>        print(threading.surrent_thread().name, <span class="hljs-built_in">len</span>(infos),<br>             <span class="hljs-string">&quot;html_queue.size = &quot;</span>, html_queue.qsize())<br>        time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    url_queue = queue.Queue()<br>    html_queue = queue.Queue()<br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> crawler.urls:<br>        url_queue.put(url)<br><span class="hljs-comment">#爬取数据线程</span><br>    <span class="hljs-keyword">for</span> threadId <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        t = threading.Thread(target = do_craw, args = (url_queue, html_queue), name = <span class="hljs-string">f&quot;craw<span class="hljs-subst">&#123;threadId&#125;</span>&quot;</span>)<br>        t.start()<br>        t.join()<br><br>    <span class="hljs-comment">#解析数据线程</span><br>    fout = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;blog_spider.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>    <span class="hljs-keyword">for</span> threadId <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        t = threading.Thread(target = do_parse, args = (html_queue, ), name = <span class="hljs-string">f&quot;parse<span class="hljs-subst">&#123;threadId&#125;</span>&quot;</span>)<br>        t.start()<br>        t.join()<br></code></pre></td></tr></table></figure><h4 id="6、线程安全问题"><a href="#6、线程安全问题" class="headerlink" title="6、线程安全问题"></a>6、线程安全问题</h4><blockquote><p>线程安全是指某个函数、函数库在多线程环境中被调用时，能够正确地处理多个线程之间的共享变量，使程序功能正确完成。</p><p><em>由于线程的执行会发生切换，就造成了不可预料的结果，出现线程不安全</em></p></blockquote><p><strong>lock解决线程安全问题：</strong></p><ol><li><p>try-finally模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-comment">#获取lock对象</span><br>lock = threading.Lock()<br><span class="hljs-comment">#加锁</span><br>lock.acquire()<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment">#do something</span><br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-comment">#释放锁</span><br>    lock.release()<br></code></pre></td></tr></table></figure></li><li><p>with模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><br>lock = threading.Lock()<br><br><span class="hljs-keyword">with</span> lock:<br>    <span class="hljs-comment">#do something</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, balance</span>):</span><br>        self.balance = balance<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">draw</span>(<span class="hljs-params">account, amount</span>):</span><br>    <span class="hljs-keyword">if</span>(account.balance &gt;= amount):<br>        print(<span class="hljs-string">f&quot;线程：<span class="hljs-subst">&#123;threading.current().name&#125;</span>取钱成功！&quot;</span>)<br>        account.balance -= amount<br>        print(<span class="hljs-string">f&quot;线程：<span class="hljs-subst">&#123;threading.current_thread().name&#125;</span>余额：<span class="hljs-subst">&#123;account.balance&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">f&quot;线程：<span class="hljs-subst">&#123;threading.current_thread().name&#125;</span>取钱失败，余额不足！&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    account = Account(<span class="hljs-number">1000</span>)<br>    t1 = threading.Thread(name = <span class="hljs-string">&quot;t1&quot;</span>, target = draw, args = (account, <span class="hljs-number">800</span>))<br>    t2 = threading.Thread(name = <span class="hljs-string">&quot;t2&quot;</span>, target = draw, args = (account, <span class="hljs-number">800</span>))<br>    <br>    t1.start()<br>    t2.start()<br></code></pre></td></tr></table></figure><blockquote><p>运行结果：</p><p>线程：t1取钱成功！</p><p>线程：t2取钱成功！</p><p>线程：t1余额：200线程：t2余额：-600</p><p><em>由于线程资源冲突，所以程序错误了</em></p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">lock = threading.Lock()<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">draw</span>(<span class="hljs-params">account, amount</span>):</span><br>    <span class="hljs-keyword">with</span> lock:<br>        <span class="hljs-keyword">if</span>(account.balance &gt;= amount):<br>            print(<span class="hljs-string">f&quot;线程：<span class="hljs-subst">&#123;threading.current().name&#125;</span>取钱成功！&quot;</span>)<br>            account.balance -= amount<br>            print(<span class="hljs-string">f&quot;线程：<span class="hljs-subst">&#123;threading.current_thread().name&#125;</span>余额：<span class="hljs-subst">&#123;account.balance&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">f&quot;线程：<span class="hljs-subst">&#123;threading.current_thread().name&#125;</span>取钱失败，余额不足！&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>运行成功：</p><p>线程：t1取钱成功！<br>线程：t1余额：200<br>线程：t2取钱失败，余额不足！</p></blockquote><h4 id="7、线程池ThreadPoolExecutor"><a href="#7、线程池ThreadPoolExecutor" class="headerlink" title="7、线程池ThreadPoolExecutor"></a>7、线程池ThreadPoolExecutor</h4><blockquote><p>进程池原理：新建进程系统需要分配资源、终止线程系统需要回收资源，如果可以重用线程，则可以减去新建/终止的开销。</p></blockquote><p><strong>使用进程池的好处：</strong></p><ol><li>提升性能：因为减去了大量新建、终止的开销，重用了线程资源</li><li>适用场景：适合处理突发性大量请求或大量线程完成任务、但实际任务处理时间较短</li><li>防御功能：能有效避免系统因为创建线程过多，而导致系统负荷过大相应变慢等问题</li><li>代码优势：使用线程池语法比自己新建线程执行线程更加简洁</li></ol><p><strong>ThreadPoolExecutor使用语法：</strong></p><p><em>用法1：map函数（注意map的结果和入参的顺序对应的）</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor, as_completed<br><br><span class="hljs-keyword">with</span> ThreadPoolExecutor() <span class="hljs-keyword">as</span> pool:<br>    results = pool.<span class="hljs-built_in">map</span>(craw, urls)<br>    <span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:<br>        print(result)<br></code></pre></td></tr></table></figure><p><em>用法二：future模式（注意如果使用as_completed顺序是不定的）</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> ThreadPoolExecutor() <span class="hljs-keyword">as</span> pool:<br>    futures = [pool.submit(craw, url) <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls]<br>    <br>    <span class="hljs-keyword">for</span> future <span class="hljs-keyword">in</span> futures:<br>        print(future.result())<br><span class="hljs-keyword">for</span> future <span class="hljs-keyword">in</span> as_completed(futures):<br>        print(future.result())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> crawler<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor, as_completed<br><br><br><span class="hljs-comment">#list(zip(a, b))可以将下表对应的元素一一对应起来组成元组列表</span><br><span class="hljs-comment">#craw爬取</span><br><span class="hljs-keyword">with</span> ThreadPoolExecutor() <span class="hljs-keyword">as</span> pool:<br>    results = pool.<span class="hljs-built_in">map</span>(crawler.craw, crawler.urls)<br>    htmls = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(crawler.urls, results))<br>    <span class="hljs-keyword">for</span> url, result <span class="hljs-keyword">in</span> htmls:<br>        print(url, <span class="hljs-built_in">len</span>(result))<br><br>print(<span class="hljs-string">&quot;craw over&quot;</span>)<br><br><span class="hljs-comment">#parse解析</span><br><span class="hljs-keyword">with</span> ThreadPoolExecutor() <span class="hljs-keyword">as</span> pool:<br>    futures = &#123;&#125;<br>    <span class="hljs-keyword">for</span> url, html <span class="hljs-keyword">in</span> htmls:<br>        future = pool.submit(crawler.parse, html)<br>        futures[future] = url<br><br>    <span class="hljs-keyword">for</span> future, url <span class="hljs-keyword">in</span> futures.items():<br>        print(url, future.result(), <span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="8、线程池在web服务器中实现加速"><a href="#8、线程池在web服务器中实现加速" class="headerlink" title="8、线程池在web服务器中实现加速"></a>8、线程池在web服务器中实现加速</h4><blockquote><p>示例采用flask框架</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> flask, json, time<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><br><span class="hljs-comment">#flask名字</span><br>app = flask.Flask(__name__)<br>pool = ThreadPoolExecutor()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_file</span>():</span><br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;read_file&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_data</span>():</span><br>    time.sleep(<span class="hljs-number">0.2</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;read_data&quot;</span><br>    <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_api</span>():</span><br>    time.sleep(<span class="hljs-number">0.3</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;read_api&quot;</span><br>    <br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    file = pool.submit(read_file)<br>    data = pool.submit(read_data)<br>    api = pool.submit(read_api)<br>    <br>    <span class="hljs-keyword">return</span> json.dumps(&#123;<br>        <span class="hljs-string">&quot;read_file&quot;</span>: file.result(),<br>        <span class="hljs-string">&quot;read_data&quot;</span>: data.result(),<br>        <span class="hljs-string">&quot;read_api&quot;</span>: api.result(),<br>    &#125;)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><h4 id="9、多进程模块multiprocessing"><a href="#9、多进程模块multiprocessing" class="headerlink" title="9、多进程模块multiprocessing"></a>9、多进程模块multiprocessing</h4><blockquote><p>multiprocessing与多线程模块在语法上只是改个类名的差别</p><p>多进程用于密集型cpu计算，在io运算中甚至会增加开销</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#多进程基本调用</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br>p = Process(target = func, args = (<span class="hljs-string">&quot;f&quot;</span>, ))<br>p.start()<br>p.join()<br><br><span class="hljs-comment">#使用Queue调度</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br>q.Queue()<br>q.put([])<br>item = q.get()<br><br><span class="hljs-comment">#加锁</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Lock<br>lock = Lock()<br><span class="hljs-keyword">with</span> Lock:<br>    <span class="hljs-comment"># run</span><br>    <br><span class="hljs-comment">#进程池</span><br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ProcessPoolExecutor<br><span class="hljs-keyword">with</span> ProcessPoolExecutor() <span class="hljs-keyword">as</span> pool:<br>    <span class="hljs-comment">#map方法</span><br>    results = pool.<span class="hljs-built_in">map</span>(fun, [<span class="hljs-built_in">list</span>])<br>    <br>    <span class="hljs-comment">#submit方法</span><br>    results = pool.submit(fun, parameter).result()<br></code></pre></td></tr></table></figure><h4 id="10、异步io协程并发爬虫"><a href="#10、异步io协程并发爬虫" class="headerlink" title="10、异步io协程并发爬虫"></a>10、异步io协程并发爬虫</h4><blockquote><p>核心原理：配合io复用原理</p><p>#python主要使用asyncio库实现异步io，要用在异步io编程中，依赖的库必须支持异步io特性（爬虫中requests并不支持异步，需要使用aiohttp）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-comment">#获取事件循环</span><br>loop = asyncio.get_event_loop()<br><br><span class="hljs-comment">#定义协程</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">myfunc</span>(<span class="hljs-params">url</span>):</span><br>    <span class="hljs-keyword">await</span>.get_utl(url)<br>    <br><span class="hljs-comment">#创建任务列表</span><br>tasks = [loop.create_task(func(url) <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls)]<br><br><span class="hljs-comment">#执行爬虫事件列表</span><br>loop.run_until_complete(asyncio.wait(tasks))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫日记</title>
    <link href="/blog/2021/02/05/python%E7%88%AC%E8%99%AB%E6%97%A5%E8%AE%B0/"/>
    <url>/blog/2021/02/05/python%E7%88%AC%E8%99%AB%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Python—爬虫笔记"><a href="#Python—爬虫笔记" class="headerlink" title="Python—爬虫笔记"></a>Python—爬虫笔记</h2><blockquote><p>python爬虫可简单分为三步</p><p>1、获取、爬取数据源代码(html)</p><p>2、提取html源代码中需要的数据内容</p><p>3、保存提取出来的内容</p><p>爬取示例网站：<a href="https://movie.douban.com/top250%EF%BC%88%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1top250%EF%BC%89">https://movie.douban.com/top250（豆瓣电影top250）</a></p></blockquote> <a id="more"></a> <h3 id="一、爬取HTML"><a href="#一、爬取HTML" class="headerlink" title="一、爬取HTML"></a>一、爬取HTML</h3><h4 id="1、使用自带的urllib库爬取"><a href="#1、使用自带的urllib库爬取" class="headerlink" title="1、使用自带的urllib库爬取"></a>1、使用自带的urllib库爬取</h4><blockquote><p>参考官方相关文档：<a href="https://docs.python.org/zh-cn/3.7/library/urllib.request.html#urllib.request.Request">https://docs.python.org/zh-cn/3.7/library/urllib.request.html#urllib.request.Request</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.requests<br>url = <span class="hljs-string">&quot;https://movie.douban.com/top250&quot;</span><br><br><span class="hljs-comment">#使用urlopen方法不能添加请求头，只能爬取简单的网站，试了一下不能爬取douban250，故抛弃</span><br><span class="hljs-comment">#response = urllib.request.urlopen(&#x27;https://movie.douban.com/top250&#x27;)</span><br><br><span class="hljs-comment">#使用request先加入请求头</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36(KHTML, like Gecko) Chrome/88.0.4324.146 Safari/537.36&#x27;</span><br>&#125;<br><br>request = urllib.request.Request(url, headers = headers)<br>response = urllib.request.urlopen(requests)<br><br><span class="hljs-string">&quot;&quot;&quot;拓展：可使用第三方库fake-useragent随机仿冒一个请求头出来。</span><br><span class="hljs-string">from fake-user-agent import UserAgent</span><br><span class="hljs-string">headers = &#123;</span><br><span class="hljs-string">&quot;user-agent&quot;: UserAgent().random#也可指定浏览器UserAgent().chrome</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment">#可以使用getcode方法查看是否成功爬取，响应为200即为成功爬取</span><br><span class="hljs-comment">#使用read函数读出源代码并使用utf-8转码</span><br>html = response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="2、使用requests第三方库（推荐）"><a href="#2、使用requests第三方库（推荐）" class="headerlink" title="2、使用requests第三方库（推荐）"></a>2、使用requests第三方库（推荐）</h4><blockquote><p>官方文档：<a href="https://2.python-requests.org/en/master/">https://2.python-requests.org/en/master/</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>response = requests.get(url, headers = headers)<br><span class="hljs-comment">#response.status_code可查看响应状态、</span><br>html = response.text<br></code></pre></td></tr></table></figure><h4 id="3、requests-html第三方库（requests加强版，暂未使用过）"><a href="#3、requests-html第三方库（requests加强版，暂未使用过）" class="headerlink" title="3、requests_html第三方库（requests加强版，暂未使用过）"></a>3、requests_html第三方库（requests加强版，暂未使用过）</h4><h3 id="二、解析数据"><a href="#二、解析数据" class="headerlink" title="二、解析数据"></a>二、解析数据</h3><p><strong>我们要提取的数据有：</strong></p><ol><li>电影名字</li><li>导演、演员</li><li>推荐句子</li></ol><h4 id="1、regex正则表达式（通用各大语言，需学习re表达式语法）"><a href="#1、regex正则表达式（通用各大语言，需学习re表达式语法）" class="headerlink" title="1、regex正则表达式（通用各大语言，需学习re表达式语法）"></a>1、regex正则表达式（通用各大语言，需学习re表达式语法）</h4><blockquote><p>re学习网站：<a href="https://deerchao.cn/tutorials/regex/regex.htm">https://deerchao.cn/tutorials/regex/regex.htm</a></p><p>python官方文档：<a href="https://docs.python.org/zh-cn/3/library/re.html">https://docs.python.org/zh-cn/3/library/re.html</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-comment">#.............</span><br></code></pre></td></tr></table></figure><h4 id="2、第三方库BeautifulSoup提取"><a href="#2、第三方库BeautifulSoup提取" class="headerlink" title="2、第三方库BeautifulSoup提取"></a>2、第三方库BeautifulSoup提取</h4><blockquote><p>BeautifulSoup官方文档：<a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#">https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#导入bs4库</span><br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-comment">#解析我们获取到的html源代码</span><br>soup = BeautifulSoup(html, <span class="hljs-string">&#x27;lxml&#x27;</span>)<span class="hljs-comment">#soup.prettify()函数可打印优化的html代码</span><br><span class="hljs-comment">#整个页面的内容文字页面标签</span><br>moives = soup.find(<span class="hljs-string">&quot;ol&quot;</span>, class_= <span class="hljs-string">&quot;grid_view&quot;</span>)<br><span class="hljs-comment">#创建一个列表，存放提取出来的数据</span><br>moives_list = []<br><span class="hljs-comment">#将每个电影信息分离出来，moives_info为存放bs4.element.ResultSet的列表</span><br>moives_info = moives.find_all(<span class="hljs-string">&quot;li&quot;</span>)<br><span class="hljs-keyword">for</span> info <span class="hljs-keyword">in</span> moives_info:<br>    moives_name = info.find(<span class="hljs-string">&quot;span&quot;</span>, class_ = <span class="hljs-string">&quot;title&quot;</span>).text<span class="hljs-comment">#电影名字</span><br>    moives_author = info.find(<span class="hljs-string">&quot;div&quot;</span>, class_ = <span class="hljs-string">&quot;bd&quot;</span>).find(<span class="hljs-string">&quot;p&quot;</span>).text<span class="hljs-comment">#电影作者信息等</span><br>    moives_quote = info.find(<span class="hljs-string">&quot;p&quot;</span>, class_ = <span class="hljs-string">&quot;quote&quot;</span>).text<span class="hljs-comment">#电影名言</span><br>    moives_list.append([moives_name, moives_author, moives_quote])<span class="hljs-comment">#存放到列表里面</span><br></code></pre></td></tr></table></figure><h4 id="3、使用css选择器定位"><a href="#3、使用css选择器定位" class="headerlink" title="3、使用css选择器定位"></a>3、使用css选择器定位</h4><blockquote></blockquote><h4 id="4、Xpath选择器定位"><a href="#4、Xpath选择器定位" class="headerlink" title="4、Xpath选择器定位"></a>4、Xpath选择器定位</h4><blockquote><p>xpath路径过长，如果改变了网页，那对应代码也需要改变，不利于维护</p></blockquote><h3 id="三、保存数据"><a href="#三、保存数据" class="headerlink" title="三、保存数据"></a>三、保存数据</h3><h4 id="1、存为csv等office文件"><a href="#1、存为csv等office文件" class="headerlink" title="1、存为csv等office文件"></a>1、存为csv等office文件</h4><blockquote><p>csv模块文档：<a href="https://docs.python.org/zh-cn/3/library/csv.html">https://docs.python.org/zh-cn/3/library/csv.html</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;douban_top250.csv&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, newline = <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    file = csv.writer(f)<br>    file.writerows(moives_list)<br></code></pre></td></tr></table></figure><h4 id="2、保存为json格式"><a href="#2、保存为json格式" class="headerlink" title="2、保存为json格式"></a>2、保存为json格式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;douban_top250.json&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    file = json.dump(moives_list, f)<br></code></pre></td></tr></table></figure><p><strong>未完待续……</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
